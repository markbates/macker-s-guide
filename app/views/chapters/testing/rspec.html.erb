<% page_title "Testing Mack Application using RSpec"%>

<p>
  As described in the <%= chapter('introduction to testing', 'testing/index')%>, all mack application will use rspec as its testing framework unless specified to use Test::Unit::TestCase.  This chapter will talk about what's involved in writing a rspec tests in mack framework and how it integrates with mack-orm.
</p>

<p>
  If you haven't done so, let's create a mack application by calling <code>%> mack foo</code>, which will generate a mack application named <code>foo</code> and use the rspec as its test framework.  Now, let's take a peek inside the foo's folder; you'll notice that there's a folder named test, and in it, there are a few other folders: <code>controllers, helpers, helpers/controllers, helpers/controllers, helpers/views, models</code>.  And in them are actual test files.
</p>

<p>
  All these files are generated, because by default all mack applications contain a default controller and view, and with it the test files also got generated.  Part of the reason is to ensure that newly generated app doesn't contain error, and the other reason is so that developer like you can look at the test files as a reference to build your own test suites.
</p>

<p>
  If you have never used rspec before, then it'd be to your best interest to learn more about rspec at <%= link_to('http://rspec.info', 'http://rspec.info')%>
</p>

<p>
  If you look at the tests generated by the mack, you'll notice a pattern on how the tests are structured: First, at the top of the file, we require the <code>spec_helper.rb</code> file located at the root of the test folder.  The spec_helper is the one that sets up the environment of the test, and also require any files that may be needed by the test.
</p>

<p>
  You'll also notice that there's a file called <code>spec.opts</code> file in the root test folder.  This file define the options passed in the spec command.  You'll never have to explicitly use this file, because the rake command will take care of it.
</p>

<p>
  As you have noticed, the rake command will run the test entire test suites of your application.  How can you run individual test suite in your application? Or to go even further, how can I run individual test inside a test suite?  Let's look at the following example on how to achieve those two things:
  
<% code do -%>
# if you run the individual test frequently, I'd suggest you setup an alias for rspec
# so you don't need to type in the formatting options all the time
# set alias for rspec to be 'spec --format specdoc --colour'.

# now, in your application folder, let's say you want to run the default_controller_spec.rb file
%> spec test/controllers/default_controller_spec.rb

# now here's how to run the individual test:
%> spec test/controllers/default_controller_spec.rb -e "DefaultController should be able to successfully connect to homepage"

# Note that the rspec test is structured like a tree: [top_level_describe] -> [example_groups].  
# And each describe can have another layer of describe.  So in order to run the individual test
# you will need to match the tree structure as stated in the above example.
<% end -%>
</p>

<p>
  One more important thing.  If you use ORM support in mack (either mack-data_mapper or mack-active_record), you'll get transactional support automatically.  So each db transaction will get rolled back after each test.
</p>